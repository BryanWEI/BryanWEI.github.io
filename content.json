{"meta":{"title":"Bryanwa's Blog","subtitle":"Hello World..","description":null,"author":"Bryanwa","url":"https://bryanwa.com","root":"/"},"pages":[{"title":"tags","date":"2020-07-30T01:15:09.000Z","updated":"2020-07-30T01:15:09.831Z","comments":true,"path":"tags/index.html","permalink":"https://bryanwa.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java类加载机制","slug":"Java类加载机制","date":"2020-09-07T06:30:59.000Z","updated":"2020-09-07T11:09:55.160Z","comments":true,"path":"2020/09/07/Java类加载机制/","link":"","permalink":"https://bryanwa.com/2020/09/07/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/","excerpt":"","text":"一、什么是Java类加载机制在介绍类的加载机制之前，先来看看，类的加载机制在整个java程序运行期间处于一个什么环节，下面使用一张图来表示： 从上图可以看出，java文件通过编译器变成了.class文件，接下来类加载器又将这些.class文件加载到JVM中。其中类装载器的作用其实就是类的加载。今天我们要讨论的就是这个环节。有了这个印象之后我们再来看类的加载的概念： 其实可以一句话来解释：类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个 java.lang.Class对象，用来封装类在方法区内的数据结构。 在什么时候才会启动类加载器？其实，类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。 从哪个地方去加载.class文件 本地磁盘 网上加载.class文件（Applet） 数据库 压缩文件中（ZAR，jar等） 从其他文件生成的（JSP应用） 二、类加载的过程类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。它们的顺序如下图所示： 其中类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。 1.加载”加载“是”类加机制”的第一个过程，在加载阶段，虚拟机主要完成三件事： 通过一个类的全限定名来获取其定义的二进制字节流 将这个字节流所代表的的静态存储结构转化为方法区的运行时数据结构 在堆中生成一个代表这个类的Class对象，作为方法区中这些数据的访问入口其中，二进制字节流可以通过以下方式获取： 从 ZIP 包读取，成为 JAR、EAR、WAR 格式的基础 从网络中获取，最典型的应用是 Applet 运行时计算生成，例如动态代理技术，在 java.lang.reflect.Proxy 使用 ProxyGenerator.generateProxyClass 的代理类的二进制字节流 由其他文件生成，例如由 JSP 文件生成对应的 Class 类 相对于类加载的其他阶段而言，加载阶段是可控性最强的阶段，因为程序员可以使用系统的类加载器加载，还可以使用自己的类加载器加载。我们在最后一部分会详细介绍这个类加载器。在这里我们只需要知道类加载器的作用就是上面虚拟机需要完成的三件事，仅此而已就好了。 验证验证的主要作用就是确保被加载的类的正确性。也是连接阶段的第一步。说白了也就是我们加载好的.class文件不能对我们的虚拟机有危害，所以先检测验证一下。他主要是完成四个阶段的验证： 文件格式的验证：验证.class文件字节流是否符合class文件的格式的规范，并且能够被当前版本的虚拟机处理。这里面主要对魔数、主版本号、常量池等等的校验 元数据验证：主要是对字节码描述的信息进行语义分析，以保证其描述的信息符合java语言规范的要求，比如说验证这个类是不是有父类，类中的字段方法是不是和父类冲突等等 字节码验证：这是整个验证过程最复杂的阶段，主要是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。在元数据验证阶段对数据类型做出验证后，这个阶段主要对类的方法做出分析，保证类的方法在运行时不会做出危害虚拟机安全的事 符号引用验证：它是验证的最后一个阶段，发生在虚拟机将符号引用转化为直接引用的时候。主要是对类自身以外的信息进行校验。目的是确保解析动作能够完成对整个类加载机制而言，验证阶段是一个很重要但是非必需的阶段，如果我们的代码能够确保没有问题，那么我们就没有必要去验证，毕竟验证需要花费一定的的时间。当然我们可以使用-Xverfity:none来关闭大部分的验证。 准备 准备阶段主要为类变量分配内存并设置初始值。这些内存都在方法区分配。在这个阶段我们只需要注意两点就好了，也就是类变量和初始值两个关键词： 类变量是被 static 修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。 实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。应该注意到，实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。1public static int value = 123; 如果类变量是常量，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。1public static final int value = 123; 注意，在上面value是被static所修饰的准备阶段之后是0，但是如果同时被final和static修饰准备阶段之后就是1了。我们可以理解为static final在编译器就将结果放入调用它的类的常量池中了。 解析解析阶段主要是虚拟机将常量池中的符号引用转化为直接引用的过程。 符号引用：以一组符号来描述所引用的目标，可以是任何形式的字面量，只要是能无歧义的定位到目标就好，就好比在班级中，老师可以用张三来代表你，也可以用你的学号来代表你，但无论任何方式这些都只是一个代号（符号），这个代号指向你（符号引用） 直接引用：直接引用是可以指向目标的指针、相对偏移量或者是一个能直接或间接定位到目标的句柄。和虚拟机实现的内存有关，不同的虚拟机直接引用一般不同 解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。 初始化初始化阶段才真正开始执行类中定义的 Java 程序代码，这是类加载机制的最后一步。 初始化阶段是虚拟机执行类构造器 () 方法的过程。在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。 () 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如： 1234567public class Test &#123; static &#123; i = 0; // 给变量赋值可以正常编译通过 System.out.print(i); // 这句编译器会提示“非法向前引用” &#125; static int i = 1;&#125; 由于父类的 () 方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类。例如以下代码： 1234567891011121314static class Parent &#123; public static int A = 1; static &#123; A = 2; &#125;&#125;static class Sub extends Parent &#123; public static int B = A;&#125;public static void main(String[] args) &#123; System.out.println(Sub.B); // 2&#125; 接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 () 方法。但接口与类不同的是，执行接口的 () 方法不需要先执行父接口的 () 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 () 方法。 虚拟机会保证一个类的 () 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 () 方法，其它线程都会阻塞等待，直到活动线程执行 () 方法完毕。如果在一个类的 () 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。 三、类的初始化时机 主动引用 虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）： 遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译期把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。 使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。 当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类。 当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。 被动引用 以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括： 通过子类引用父类的静态字段，不会导致子类初始化。 System.out.println(SubClass.value); // value 字段在 SuperClass 中定义 通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。 SuperClass[] sca = new SuperClass[10]; 常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。 System.out.println(ConstClass.HELLOWORLD); 四、类的加载器两个类相等，需要类本身相等，并且使用同一个类加载器进行加载。这是因为每一个类加载器都拥有一个独立的类名称空间。 这里的相等，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果为 true，也包括使用 instanceof 关键字做对象所属关系判定结果为 true。 类的加载器分类 从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器： 启动类加载器（Bootstrap ClassLoader），使用 C++ 实现，是虚拟机自身的一部分 所有其它类的加载器，使用 Java 实现，独立于虚拟机，继承自抽象类 java.lang.ClassLoader 从Java 开发人员的角度看，类加载器可以划分得更细致一些： 启动类加载器（Bootstrap ClassLoader）此类加载器负责将存放在 \\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。 扩展类加载器（Extension ClassLoader）这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将 /lib/ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。 应用程序类加载器（Application ClassLoader）这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。 双亲委派模式 应用程序是由三种类加载器互相配合从而实现类加载，除此之外还可以加入自己定义的类加载器。 下图展示了类加载器之间的层次关系，称为双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其它的类加载器都要有自己的父类加载器。这里的父子关系一般通过组合关系（Composition）来实现，而不是继承关系（Inheritance）。 工作过程一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成时才尝试自己加载。 好处使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。例如 java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 并放到 ClassPath 中，程序可以编译通过。由于双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 ClassPath 中的 Object 优先级更高，这是因为 rt.jar 中的 Object 使用的是启动类加载器，而 ClassPath 中的 Object 使用的是应用程序类加载器。rt.jar 中的 Object 优先级更高，那么程序中所有的 Object 都是这个 Object。 实现以下是抽象类 java.lang.ClassLoader 的代码片段，其中的 loadClass() 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 ClassNotFoundException，此时尝试自己去加载。 1234567891011121314151617181920212223242526272829303132333435363738394041public abstract class ClassLoader &#123; // The parent class loader for delegation private final ClassLoader parent; public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123; return loadClass(name, false); &#125; protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException &#123; synchronized (getClassLoadingLock(name)) &#123; // First, check if the class has already been loaded Class&lt;?&gt; c = findLoadedClass(name); if (c == null) &#123; try &#123; if (parent != null) &#123; c = parent.loadClass(name, false); &#125; else &#123; c = findBootstrapClassOrNull(name); &#125; &#125; catch (ClassNotFoundException e) &#123; // ClassNotFoundException thrown if class not found // from the non-null parent class loader &#125; if (c == null) &#123; // If still not found, then invoke findClass in order // to find the class. c = findClass(name); &#125; &#125; if (resolve) &#123; resolveClass(c); &#125; return c; &#125; &#125; protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123; throw new ClassNotFoundException(name); &#125;&#125; 五、自定义类加载器实现以下代码中的 FileSystemClassLoader 是自定义类加载器，继承自 java.lang.ClassLoader，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（.class 文件），然后读取该文件内容，最后通过 defineClass() 方法来把这些字节代码转换成 java.lang.Class 类的实例。 java.lang.ClassLoader 的 loadClass() 实现了双亲委派模型的逻辑，自定义类加载器一般不去重写它，但是需要重写 findClass() 方法。 12345678910111213141516171819202122232425262728293031323334353637383940public class FileSystemClassLoader extends ClassLoader &#123; private String rootDir; public FileSystemClassLoader(String rootDir) &#123; this.rootDir = rootDir; &#125; protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123; byte[] classData = getClassData(name); if (classData == null) &#123; throw new ClassNotFoundException(); &#125; else &#123; return defineClass(name, classData, 0, classData.length); &#125; &#125; private byte[] getClassData(String className) &#123; String path = classNameToPath(className); try &#123; InputStream ins = new FileInputStream(path); ByteArrayOutputStream baos = new ByteArrayOutputStream(); int bufferSize = 4096; byte[] buffer = new byte[bufferSize]; int bytesNumRead; while ((bytesNumRead = ins.read(buffer)) != -1) &#123; baos.write(buffer, 0, bytesNumRead); &#125; return baos.toByteArray(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return null; &#125; private String classNameToPath(String className) &#123; return rootDir + File.separatorChar + className.replace(&#x27;.&#x27;, File.separatorChar) + &quot;.class&quot;; &#125;&#125;","categories":[],"tags":[{"name":"转载文章","slug":"转载文章","permalink":"https://bryanwa.com/tags/%E8%BD%AC%E8%BD%BD%E6%96%87%E7%AB%A0/"}],"author":{"avatar":"https://cdn.jsdelivr.net/gh/BryanWEI/images/articles/转载文章测试/avatar.jpeg","name":"Bryanwa","url":"https://bryanwa.com/"}},{"title":"转载文章测试","slug":"转载文章测试","date":"2020-08-31T02:36:01.000Z","updated":"2020-09-07T06:28:36.693Z","comments":true,"path":"2020/08/31/转载文章测试/","link":"","permalink":"https://bryanwa.com/2020/08/31/%E8%BD%AC%E8%BD%BD%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/","excerpt":"","text":"MarkDown教程 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。 Markdown 编写的文档后缀为 .md, .markdown。 MarkDown标题MarkDown标题有两种格式。 1、使用 = 和 - 标记一级和二级标题= 和 - 标记语法格式如下： 12345我展示的是一级标题&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;我展示的是二级标题----------------- 显示效果如下图： 在本网站上显示效果：start：我展示的是一级标题================= 我展示的是二级标题end。 2、使用 # 号标记使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 显示效果如下图： 在本网站上显示效果：start： 一级标题二级标题三级标题四级标题五级标题六级标题end。 MarkDown段落Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。当然也可以在段落后面使用一个空行来表示重新开始一个段落。 字体Markdown 可以使用以下几种字体： 123456*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___ 显示效果如下所示： 在本网站上显示效果：start：斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本end。 分割线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789**** * ******- - ----------- 显示效果如下所示： 在本网站上显示效果：start： end。 删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下： 123RUNOOB.COMGOOGLE.COM~~BAIDU.COM~~ 显示效果如下所示： 在本网站上显示效果：start：RUNOOB.COMGOOGLE.COMBAIDU.COMend。 下划线下划线可以通过 HTML 的 标签来实现： 1&lt;u&gt;带下划线文本&lt;&#x2F;u&gt; 显示效果如下所示： 在本网站上显示效果：start：带下划线文本end。 脚注脚注是对文本的补充说明。Markdown 脚注的格式如下: 1[^要注明的文本] 以下实例演示了脚注的用法： 123创建脚注格式类似这样 [^RUNOOB]。[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！ 演示效果如下： 在本网站上显示效果：start：创建脚注格式类似这样 [^RUNOOB]。 [^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！end。 MarkDown列表Markdown 支持有序列表和无序列表。无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容 123456789101112* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项 显示结果如下： 在本网站上显示效果：start： 第一项 第二项 第三项 第一项 第二项 第三项 第一项 第二项 第三项 end。 有序列表使用数字并加上 . 号来表示，如： 1231. 第一项2. 第二项3. 第三项 在本网站上显示效果：start： 第一项 第二项 第三项 end。 列表嵌套列表嵌套只需在子列表中的选项前面添加四个空格即可： 1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 显示结果如下： 在本网站上显示效果：start： 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 end。 MarkDown区块Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号： 123&gt; 区块引用&gt; 菜鸟教程&gt; 学的不仅是技术更是梦想 显示结果如下： 在本网站上显示效果：start： 区块引用菜鸟教程学的不仅是技术更是梦想end。 另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推： 123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 显示结果如下： 在本网站上显示效果：start： 最外层 第一层嵌套 第二层嵌套end。 区块中使用列表区块中使用列表实例如下： 123456&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项 显示结果如下： 在本网站上显示效果：start： 区块中使用列表 第一项 第二项 第一项 第二项 第三项 end。 列表中使用区块如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。区块中使用列表实例如下： 1234* 第一项 &gt; 菜鸟教程 &gt; 学的不仅是技术更是梦想* 第二项 显示结果如下： 在本网站上显示效果：start： 第一项 菜鸟教程学的不仅是技术更是梦想 第二项 end。* MarkDown代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如： 1&#96;printf()&#96; 函数 显示结果如下： 在本网站上显示效果：start：printf() 函数end。 代码区块代码区块使用 4 个空格或者一个制表符（Tab 键）。实例如下：显示结果如下： 在本网站上显示效果：start： &lt;?php echo ‘RUNOOB’; function test() { echo ‘test’; }end。 你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）： 在本网站上显示效果：start： 123$(document).ready(function () &#123; alert(&#x27;RUNOOB&#x27;);&#125;); 123String gbrcsNos = gbrcs.stream().distinct() .map(GroupBuyRuleCondition::getCouponsTemplateCode) .collect(Collectors.toList()); end。 MarkDown链接链接使用方法如下： 12345[链接名称](链接地址)或者&lt;链接地址&gt; 例如： 1这是一个链接 [菜鸟教程](https:&#x2F;&#x2F;www.runoob.com)","categories":[],"tags":[{"name":"转载文章","slug":"转载文章","permalink":"https://bryanwa.com/tags/%E8%BD%AC%E8%BD%BD%E6%96%87%E7%AB%A0/"}],"author":{"avatar":"https://cdn.jsdelivr.net/gh/BryanWEI/images/articles/转载文章测试/avatar.jpeg","name":"Bryanwa","url":"https://bryanwa.com/"}},{"title":"我的博客","slug":"我的博客","date":"2020-07-29T08:32:01.000Z","updated":"2020-07-30T02:48:55.024Z","comments":true,"path":"2020/07/29/我的博客/","link":"","permalink":"https://bryanwa.com/2020/07/29/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"","categories":[],"tags":[{"name":"“测试”","slug":"“测试”","permalink":"https://bryanwa.com/tags/%E2%80%9C%E6%B5%8B%E8%AF%95%E2%80%9D/"}]},{"title":"","slug":"test-my-site","date":"2020-07-29T01:44:16.895Z","updated":"2020-08-31T08:03:16.867Z","comments":true,"path":"2020/07/29/test-my-site/","link":"","permalink":"https://bryanwa.com/2020/07/29/test-my-site/","excerpt":"","text":"一级标题段落斜体文本斜体文本粗体文本&lt;u&gt;粗体文本&lt;/u&gt;带下划线文本粗斜体文本^test^test: hihihihihi创建脚注格式类似这样 ^RUNOOB。 ^RUNOOB: 菜鸟教程 – 学的不仅是技术，更是梦想！！！粗斜体文本 二级标题 第一 第一内容 第二 第二内容三级标题 区块第一段区块第二段区块第三段 四级标题 第一 第一内容第二内容 第二 第三内容第四内容 五级标题12List&lt;Map&gt; giftCoupons = couponsTemplateMapper.giftCouponAccountQuery(paramsMap);Map giftCpnMap = new HashMap();六级标题这是一个链接：百度 七级标题12List&lt;Map&gt; giftCoupons &#x3D; couponsTemplateMapper.giftCouponAccountQuery(paramsMap); Map giftCpnMap &#x3D; new HashMap(); 创建脚注格式类似这样 [^RUNOOB]。 [^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-07-29T01:42:07.944Z","updated":"2020-07-30T02:43:58.502Z","comments":true,"path":"2020/07/29/hello-world/","link":"","permalink":"https://bryanwa.com/2020/07/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"转载文章","slug":"转载文章","permalink":"https://bryanwa.com/tags/%E8%BD%AC%E8%BD%BD%E6%96%87%E7%AB%A0/"},{"name":"“测试”","slug":"“测试”","permalink":"https://bryanwa.com/tags/%E2%80%9C%E6%B5%8B%E8%AF%95%E2%80%9D/"}]}